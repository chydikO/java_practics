package ua.step.puzzle;


/**
 * Эта задача так названа потому, что она основывается на программе, делящей два
 * long значения. Делимое означает число микросекунд в сутках; делитель – число
 * миллисекунд в сутках.
 * 
 */
public class LongDivision
{
    /**
     * Решение задачи кажется совершенно тривиальным. Число миллисекунд в сутках
     * и число микросекунд в сутках – константы. Для наглядности они записаны с
     * помощью арифметического выражения. Число микросекунд в сутках это (24
     * часа * 60 минут * 60 секунд * 1000 миллисекунд * 1000 микросекунд). Число
     * миллисекунд в сутках это почти то же самое, за исключением последнего
     * множителя - 1000. Когда программа разделит число миллисекунд в сутках на
     * число микросекунд в сутках, все множители должны будут сократиться и
     * останется только последний множитель - 1000, что является числом
     * микросекунд в одной миллисекунде. И делимое, и делитель – long числа, то
     * есть разрядной сетки достаточно, чтобы сохранить без потерь из-за
     * переполнения оба числа. Вроде бы все указывает на то, что программа
     * должна вывести на экран 1000.
     * 
     * @param args
     */
    public static void main(String[] args)
    {
        final long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;
        final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;
        System.out.println(MICROS_PER_DAY / MILLIS_PER_DAY);
    }
}
